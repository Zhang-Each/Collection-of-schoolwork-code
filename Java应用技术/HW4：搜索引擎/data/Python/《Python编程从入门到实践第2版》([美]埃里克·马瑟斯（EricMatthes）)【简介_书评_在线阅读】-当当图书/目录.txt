第 一部分 基础知识 第 1章　起步　2 1.1.1　Python版本　2 1.1.2　运行Python代码片段　2 1.1.3　Sublime Text简介　3 1.2　在不同操作系统中搭建Python编程环境　3 1.2.1　在Windows系统中搭建Python编程环境　4 1.2.2　在macOS系统中搭建Python编程环境　5 1.2.3　在Linux 系统中搭建Python编程环境　7 1.3　运行Hello World 程序　8 1.3.1　配置Sublime Text以使用正确的Python版本　8 1.3.2　运行程序hello_world.py　8 1.4　解决安装问题　9 
第 一部分 基础知识
第 1章　起步　2

1.1　搭建编程环境　2
1.1.1　Python版本　2
1.1.2　运行Python代码片段　2
1.1.3　Sublime Text简介　3
1.2　在不同操作系统中搭建Python编程环境　3
1.2.1　在Windows系统中搭建Python编程环境　4
1.2.2　在macOS系统中搭建Python编程环境　5
1.2.3　在Linux 系统中搭建Python编程环境　7
1.3　运行Hello World 程序　8
1.3.1　配置Sublime Text以使用正确的Python版本　8
1.3.2　运行程序hello_world.py　8
1.4　解决安装问题　9
1.5　从终端运行Python程序　9
1.5.1　在Windows系统中从终端运行Python 程序　10
1.5.2　在Linux和macOS系统中从终端运行Python程序　10
1.6　小结　11
第 2章　变量和简单数据类型　12
2.1　运行hello_world.py时发生的情况　12
2.2　变量　13
2.2.1　变量的命名和使用　13
2.2.2　使用变量时避免命名错误　14
2.2.3　变量是标签　15
2.3　字符串　16
2.3.1　使用方法修改字符串的大小写　17
2.3.3　使用制表符或换行符来添加空白　18
2.3.4　删除空白　19
2.3.5　使用字符串时避免语法错误　20
2.4　数　21
2.4.1　整数　22
2.4.2　浮点数　22
2.4.3　整数和浮点数　23
2.4.4　数中的下划线　23
2.4.5　同时给多个变量赋值　24
2.4.6　常量　24
2.5　注释　25
2.5.1　如何编写注释　25
2.5.2　该编写什么样的注释　25
2.6　Python之禅　26
2.7　小结　27
第3章　列表简介　28
3.1　列表是什么　28
3.1.1　访问列表元素　29
3.1.2　索引从0而不是1开始　29
3.1.3　使用列表中的各个值　30
3.2　修改、添加和删除元素　31
3.2.1　修改列表元素　31
3.2.2　在列表中添加元素　31
3.2.3　从列表中删除元素　32
3.3　组织列表　36
3.3.1　使用方法sort()对列表永久排序　37
3.3.2　使用函数sorted()对列表临时排序　37
3.3.3　倒着打印列表　38
3.3.4　确定列表的长度　38
3.4　使用列表时避免索引错误　39
3.5　小结　41
第4章　操作列表　42
4.1　遍历整个列表　42
4.1.1　深入研究循环　43
4.1.2　在for 循环中执行更多操作　44
4.1.3　在for 循环结束后执行一些操作　45
4.2　避免缩进错误　45
4.2.1　忘记缩进　46
4.2.2　忘记缩进额外的代码行　46
4.2.3　不必要的缩进　47
4.2.4　循环后不必要的缩进　47
4.2.5　遗漏了冒号　48
4.3　创建数值列表　49
4.3.1　使用函数range()　49
4.3.2　使用range()创建数字列表　50
4.3.3　对数字列表执行简单的统计计算　51
4.3.4　列表解析　52
4.4　使用列表的一部分　53
4.4.1　切片　53
4.4.2　遍历切片　54
4.4.3　复制列表　55
4.5　元组　57
4.5.1　定义元组　57
4.5.2　遍历元组中的所有值　58
4.5.3　修改元组变量　59
4.6　设置代码格式　60
4.6.1　格式设置指南　60
4.6.2　缩进　60
4.6.3　行长　60
4.6.4　空行　61
4.6.5　其他格式设置指南　61
4.7　小结　62

第5章　if语句　63
5.1　一个简单示例　63
5.2　条件测试　64
5.2.1　检查是否相等　64
5.2.2　检查是否相等时忽略大小写　64
5.2.3　检查是否不相等　65
5.2.4　数值比较　66
5.2.5　检查多个条件　66
5.2.6　检查特定值是否包含在列表中　68
5.2.8　布尔表达式　68
5.3　if语句　69
5.3.1　简单的if语句　69
5.3.2　if-else语句　70
5.3.3　if-elif-else结构　71
5.3.4　使用多个elif代码块　72
5.3.5　省略else代码块　73
5.3.6　测试多个条件　73
5.4　使用if语句处理列表　76
5.4.1　检查特殊元素　76
5.4.2　确定列表不是空的　77
5.4.3　使用多个列表　77
5.5　设置if语句的格式　79
5.6　小结　80
第6章　字典　81
6.1　一个简单的字典　81
6.2　使用字典　82
6.2.1　访问字典中的值　82
6.2.2　添加键值对　83
6.2.3　先创建一个空字典　83
6.2.4　修改字典中的值　84
6.2.5　删除键值对　85
6.2.6　由类似对象组成的字典　86
6.2.7　使用get()来访问值　87
6.3　遍历字典　88
6.3.1　遍历所有键值对　88
6.3.2　遍历字典中的所有键　90
6.3.3　按特定顺序遍历字典中的所有键　92
6.3.4　遍历字典中的所有值　92
6.4　嵌套　94
6.4.1　字典列表　94
6.4.2　在字典中存储列表　97
6.4.3　在字典中存储字典　98
6.5　小结　100
第7章　用户输入和while循环　101
7.1　函数input()的工作原理　101
7.1.1　编写清晰的程序　102
7.1.2　使用int()来获取数值输入　102
7.1.3　求模运算符　104
7.2　while循环简介　105
7.2.1　使用while循环　105
7.2.2　让用户选择何时退出　105
7.2.3　使用标志　107
7.2.4　使用break退出循环　108
7.2.5　在循环中使用continue　109
7.2.6　避免无限循环　109
7.3　使用while循环处理列表和字典　111
7.3.1　在列表之间移动元素　111
7.3.2　删除为特定值的所有列表元素　112
7.3.3　使用用户输入来填充字典　112
7.4　小结　114
第8章　函数　115
8.1　定义函数　115
8.1.1　向函数传递信息　116
8.1.2　实参和形参　116
8.2　传递实参　117
8.2.1　位置实参　117
8.2.2　关键字实参　119
8.2.3　默认值　119
8.2.4　等效的函数调用　120
8.2.5　避免实参错误　121
8.3　返回值　122
8.3.1　返回简单值　122
8.3.2　让实参变成可选的　123
8.3.3　返回字典　124
8.3.4　结合使用函数和while循环　125
8.4　传递列表　127
8.4.1　在函数中修改列表　128
8.4.2　禁止函数修改列表　130
8.5　传递任意数量的实参　131
8.5.1　结合使用位置实参和任意数量实参　132
8.5.2　使用任意数量的关键字实参　134
8.6.1　导入整个模块　134
8.6.2　导入特定的函数　135
8.6.3　使用as给函数指定别名　136
8.6.4　使用as给模块指定别名　136
8.6.5　导入模块中的所有函数　137
8.7　函数编写指南　137
8.8　小结　138
第9章　类　140
9.1　创建和使用类　140
9.1.1　创建Dog类　141
9.1.2　根据类创建实例　142
9.2　使用类和实例　144
9.2.1　Car类　145
9.2.2　给属性指定默认值　145
9.2.3　修改属性的值　146
9.3　继承　149
9.3.1　子类的方法__init__()　149
9.3.2　给子类定义属性和方法　151
9.3.3　重写父类的方法　152
9.3.4　将实例用作属性　152
9.3.5　模拟实物　154
9.4　导入类　155
9.4.1　导入单个类　155
9.4.2　在一个模块中存储多个类　157
9.4.3　从一个模块中导入多个类　158
9.4.4　导入整个模块　158
9.4.5　导入模块中的所有类　159
9.4.6　在一个模块中导入另一个模块　159
9.4.7　使用别名　160
9.4.8　自定义工作流程　160
9.5　Python标准库　161
9.6　类编码风格　162
9.7　小结　163
第 10章　文件和异常　164
10.1　从文件中读取数据　164
10.1.1　读取整个文件　164
10.1.2　文件路径　166
10.1.3　逐行读取　167
10.1.4　创建一个包含文件各行内容的列表　168
10.1.5　使用文件的内容　168
10.1.6　包含一百万位的大型文件　170
10.2　写入文件　171
10.2.1　写入空文件　171
10.2.2　写入多行　172
10.2.3　附加到文件　173
10.3　异常　174
10.3.1　处理ZeroDivisionError异常　174
10.3.2　使用try-except 代码块　174
10.3.3　使用异常避免崩溃　175
10.3.4　else代码块　176
10.3.5　处理FileNotFoundError异常　177
10.3.6　分析文本　178
10.3.7　使用多个文件　179
10.3.8　静默失败　180
10.3.9　决定报告哪些错误　181
10.4　存储数据　182
10.4.1　使用json.dump()和json.load()　182
10.4.2　保存和读取用户生成的数据　183
10.4.3　重构　185
10.5　小结　187
第 11章　测试代码　188
11.1　测试函数　188
11.1.1　单元测试和测试用例　189
11.1.2　可通过的测试　189
11.1.3　未通过的测试　191
11.1.4　测试未通过时怎么办　192
11.1.5　添加新测试　193
11.2　测试类　194
11.2.1　各种断言方法　194
11.2.2　一个要测试的类　195
11.2.3　测试AnonymousSurvey类　197
11.2.4　方法setUp()　198
11.3　小结　200
第二部分　项 目
项目1　外星人入侵　202
第 12章　武装飞船　203
12.1　规划项目　203
12.2　安装Pygame　204
12.3　开始游戏项目　204
12.3.1　创建Pygame窗口及响应用户输入　204
12.3.2　设置背景色　206
12.3.3　创建设置类　207
12.4　添加飞船图像　208
12.4.1　创建Ship类　209
12.4.2　在屏幕上绘制飞船　210
12.5　重构：方法_check_events()和__update_screen()　211
12.5.1　方法_check_events()　211
12.5.2　方法_update_screen()　212
12.6　驾驶飞船　213
12.6.1　响应按键　213
12.6.2　允许持续移动　214
12.6.3　左右移动　215
12.6.4　调整飞船的速度　216
12.6.5　限制飞船的活动范围　218
12.6.6　重构_check_events()　218
12.6.7　按Q键退出　219
12.6.8　在全屏模式下运行游戏　219
12.7　简单回顾　220
12.7.1　alien_invasion.py　220
12.7.2　settings.py　220
12.7.3　ship.py　220
12.8　射击　221
12.8.1　添加子弹设置　221
12.8.2　创建Bullet类　221
12.8.3　将子弹存储到编组中　223
12.8.4　开火　223
12.8.5　删除消失的子弹　225
12.8.6　限制子弹数量　225
12.8.7　创建方法_update_bullets()　227
第 13章　外星人来了　228
13.1　项目回顾　228
13.2　创建第 一个外星人　229
13.2.1　创建Alien类　229
13.2.2　创建Alien实例　230
13.3　创建一群外星人　232
13.3.1　确定一行可容纳多少个外星人　232
13.3.2　创建一行外星人　232
13.3.3　重构_create_fleet()　234
13.3.4　添加行　234
13.4　让外星人群移动　237
13.4.1　向右移动外星人群　237
13.4.2　创建表示外星人移动方向的设置　238
13.4.3　检查外星人是否撞到了屏幕边缘　238
13.4.4　向下移动外星人群并改变移动方向　239
13.5　射杀外星人　240
13.5.1　检测子弹与外星人的碰撞　241
13.5.3　生成新的外星人群　242
13.5.4　提高子弹的速度　243
13.5.5　重构_update_bullets()　243
13.6　结束游戏　244
13.6.1　检测外星人和飞船碰撞　244
13.6.2　响应外星人和飞船碰撞　245
13.6.3　有外星人到达屏幕底端　247
13.6.4　游戏结束　248
13.7　确定应运行游戏的哪些部分　248
13.8　小结　249
第 14章　记分　250
14.1　添加Play按钮　250
14.1.1　创建Button类　250
14.1.2　在屏幕上绘制按钮　252
14.1.3　开始游戏　253
14.1.4　重置游戏　254
14.1.5　将Play按钮切换到非活动状态　254
14.1.6　隐藏鼠标光标　255
14.2　提高等级　256
14.2.1　修改速度设置　256
14.2.2　重置速度　258
14.3　记分　258
14.3.1　显示得分　259
14.3.2　创建记分牌　260
14.3.3　在外星人被消灭时更新得分　261
14.3.4　重置得分　262
14.3.5　将消灭的每个外星人都计入得分　262
14.3.6　提高分数　263
14.3.7　舍入得分　264
14.3.8　最高得分　265
14.3.9　显示等级　267
14.3.10　显示余下的飞船数　269
14.4　小结　272
项目2　数据可视化　273
第 15章　生成数据　274
15.1　安装Matplotlib　274
15.2　绘制简单的折线图　275
15.2.1　修改标签文字和线条粗细　277
15.2.3　使用内置样式　278
15.2.4　使用scatter()绘制散点图并设置样式　279
15.2.5　使用scatter()绘制一系列点　280
15.2.6　自动计算数据　281
15.2.7　自定义颜色　282
15.2.8　使用颜色映射　283
15.2.9　自动保存图表　284
15.3　随机漫步　284
15.3.1　创建RandomWalk类　284
15.3.2　选择方向　285
15.3.3　绘制随机漫步图　286
15.3.4　模拟多次随机漫步　287
15.3.5　设置随机漫步图的样式　288
15.4　使用Plotly模拟掷骰子　292
15.4.1　安装Plotly　292
15.4.2　创建Die类　293
15.4.3　掷骰子　293
15.4.4　分析结果　294
15.4.5　绘制直方图　294
15.4.6　同时掷两个骰子　296
15.4.7　同时掷两个面数不同的骰子　298
15.5　小结　300
第 16章　下载数据　301
16.1　CSV文件格式　301
16.1.1　分析CSV文件头　302
16.1.2　打印文件头及其位置　302
16.1.3　提取并读取数据　303
16.1.4　绘制温度图表　304
16.1.5　模块datetime　305
16.1.6　在图表中添加日期　306
16.1.7　涵盖更长的时间　307
16.1.8　再绘制一个数据系列　308
16.1.9　给图表区域着色　309
16.1.10　错误检查　310
16.1.11　自己动手下载数据　313
16.2　制作全球地震散点图：JSON格式　315
16.2.2　查看JSON数据　315
16.2.3　创建地震列表　317
16.2.4　提取震级　317
16.2.5　提取位置数据　318
16.2.6　绘制震级散点图　319
16.2.7　另一种指定图表数据的方式　320
16.2.8　定制标记的尺寸　321
16.2.9　定制标记的颜色　322
16.2.10　其他渐变　323
16.2.11　添加鼠标指向时显示的文本　324
16.3　小结　325
第 17章　使用API　326
17.1　使用Web API　326
17.1.1　Git 和GitHub　326
17.1.2　使用API调用请求数据　327
17.1.3　安装Requests　327
17.1.4　处理API响应　328
17.1.5　处理响应字典　329
17.1.6　概述最受欢迎的仓库　331
17.1.7　监视API的速率限制　332
17.2　使用Plotly可视化仓库　332
17.2.1　改进Plotly图表　334
17.2.2　添加自定义工具提示　336
17.2.3　在图表中添加可单击的链接　337
17.2.4　深入了解Plotly和GitHub API　338
17.3　Hacker News API　338
17.4　小结　341
项目3　Web 应用程序　342
第 18章　从Django 入手　343
18.1　建立项目　343
18.1.1　制定规范　343
18.1.2　建立虚拟环境　344
18.1.3　激活虚拟环境　344
18.1.4　安装Django　345
18.1.5　在Django中创建项目　345
18.1.6　创建数据库　346
18.1.7　查看项目　346
18.2　创建应用程序　348
18.2.1　定义模型　348
18.2.2　激活模型　349
18.2.3　Django管理网站　351
18.2.4　定义模型Entry　353
18.2.5　迁移模型Entry　354
18.2.6　向管理网站注册Entry　354
18.2.7　Django shell　355
18.3　创建页面：学习笔记主页　357
18.3.1　映射URL　358
18.3.2　编写视图　359
18.3.3　编写模板　360
18.4　创建其他页面　361
18.4.1　模板继承　361
18.4.2　显示所有主题的页面　363
18.4.3　显示特定主题的页面　366
18.5　小结　369
第 19章　用户账户　370
19.1　让用户输入数据　370
19.1.1　添加新主题　370
19.1.2　添加新条目　374
19.1.3　编辑条目　378
19.2　创建用户账户　381
19.2.1　应用程序users　381
19.2.2　将users添加到settings.py 中　381
19.2.3　包含users的URL　382
19.2.4　登录页面　382
19.2.5　注销　384
19.2.6　注册页面　386
19.3　让用户拥有自己的数据　388
19.3.1　使用@login_required限制访问　388
19.3.2　将数据关联到用户　390
19.3.3　只允许用户访问自己的主题　393
19.3.4　保护用户的主题　393
19.3.5　保护页面edit_entry　394
19.3.6　将新主题关联到当前用户　396
第 20章　设置应用程序的样式并部署　397
20.1.1　应用程序django-bootstrap4　398
20.1.3　修改base.html　399
20.1.4　使用jumbotron设置主页的样式　403
20.1.5　设置登录页面的样式　404
20.1.6　设置显示所有主题的页面的样式　405
20.1.7　设置显示单个主题的页面中的条目样式　406
20.2　部署“学习笔记”　407
20.2.1　建立Heroku账户　408
20.2.2　安装Heroku CLI　408
20.2.3　安装必要的包　408
20.2.4　创建文件requirements.txt　409
20.2.6　为部署到Heroku而修改settings.py　410
20.2.7　创建启动进程的Procfile　410
20.2.8　使用Git 跟踪项目文件　410
20.2.9　推送到Heroku　412
20.2.10　在Heroku上建立数据库　414
20.2.12　确保项目的安全　416
20.2.13　提交并推送修改　416
20.2.14　在Heroku 上设置环境变量　417
20.2.15　创建自定义错误页面　418
20.2.16　继续开发　420
20.2.17　设置SECRET_KEY　421
20.2.18　将项目从Heroku删除　421
20.3　小结　422
附录A　安装与故障排除　423
附录B　文本编辑器与IDE　428
附录C　寻求帮助　432
附录D　使用Git 进行版本控制　436
后记　445


 
 显示全部信息