第5章搜索树 本章关键词： 动静观和平衡术。 关键词——动静观。查找技术是一种重要的操作，检索效率无疑是首先要关注的方面。对于前面章节的线性结构，其查找操作能够达到线性时间复杂度O(n)，对于排序后的有序序列查找可将时间复杂度降低到O(log2n)，然而对于动态插入和删除来说，最坏时间效率仍然达到O(n)，本章介绍的二叉排序树(BST)、平衡二叉排序树(AVL)和红黑树(RBT)等树形结构的设计在关注静态查找效率的同时，也兼顾到元素的动态调整，具有O(log2n)的插入和删除效率，方便动态维护。 关键词——平衡术。相对于二叉排序树，平衡二叉排序树通过采用近似平衡(严格控制左、右分支的高度之差)的方式避免了二叉排序树左、右分支严重失衡的最坏时间复杂度。平衡二叉排序树在删除时可能会出现失衡传播的连锁反应而导致调整的复杂性，而在红黑树通过引入“颜色”，采用部分平衡(Partly balanced)使得红黑树的平衡条件得以简化，插入和删除后的调整仅涉及常数个结点的逻辑关系变化。 “路漫漫其修远兮，吾将上下而求索。” ——《离骚》 5.1二分查找判定树 本章主要讨论查找技术。通过前面的学习，读者已经知道在线性结构中查找的效率并不理想，因此需要转向更为复杂的数据结构从而达到满意的查找效率，本章将介绍3种效率优化的搜索树。 所谓查找（或搜索）是指从一组数据元素中找到需要的数据元素。衡量查找效率的主要标准是查找过程中的平均比较次数，即平均检索长度(Average Search Length，ASL)，其定义如下： 第5章搜索树
本章关键词： 动静观和平衡术。
关键词——动静观。查找技术是一种重要的操作，检索效率无疑是首先要关注的方面。对于前面章节的线性结构，其查找操作能够达到线性时间复杂度O(n)，对于排序后的有序序列查找可将时间复杂度降低到O(log2n)，然而对于动态插入和删除来说，最坏时间效率仍然达到O(n)，本章介绍的二叉排序树(BST)、平衡二叉排序树(AVL)和红黑树(RBT)等树形结构的设计在关注静态查找效率的同时，也兼顾到元素的动态调整，具有O(log2n)的插入和删除效率，方便动态维护。
关键词——平衡术。相对于二叉排序树，平衡二叉排序树通过采用近似平衡(严格控制左、右分支的高度之差)的方式避免了二叉排序树左、右分支严重失衡的最坏时间复杂度。平衡二叉排序树在删除时可能会出现失衡传播的连锁反应而导致调整的复杂性，而在红黑树通过引入“颜色”，采用部分平衡(Partly balanced)使得红黑树的平衡条件得以简化，插入和删除后的调整仅涉及常数个结点的逻辑关系变化。
“路漫漫其修远兮，吾将上下而求索。” 
——《离骚》
5.1二分查找判定树
本章主要讨论查找技术。通过前面的学习，读者已经知道在线性结构中查找的效率并不理想，因此需要转向更为复杂的数据结构从而达到满意的查找效率，本章将介绍3种效率优化的搜索树。
所谓查找（或搜索）是指从一组数据元素中找到需要的数据元素。衡量查找效率的主要标准是查找过程中的平均比较次数，即平均检索长度(Average Search Length，ASL)，其定义如下： 

ASL（n）=∑ni=1pici

其中，n是结点的个数，pi是查找第i个结点的概率，若不特别声明，一般认为每个结点的查找概率是相等的，即p1=p2=…=pn=1/n。ci是查找到第i个结点所需要比较的次数。

ASL成功=1n∑ni=1ci

类似地，也可以给出检索失败的ASL。

ASL失败=1n∑ni=1uci

其中，uci表示查找不到第i个元素比较的次数。
除非特殊说明，在本书中出现的ASL表示检索成功的平均检索长度。
回忆2.4.2节介绍的二分查找过程，对有序表(5, 10, 25, 27, 30, 35, 45, 49, 50, 52, 55, 60, 70)进行二分查找，第一次查找以区间的中间元素作为比较对象，第二次和第三次查找分别以前半区间和后半区间的中间元素作为比较对象，此后重复同样的过程。这样的查找过程可以用二叉树描述。第一次查找的元素作为二叉树的根，第二次和第三次查找的元素分别作为根的左、右子树，依此类推，由此得到的二叉树称为二分查找判定树，如图51所示。

图51二分查找判定树

由判定树可以看出，查找给定值的比较次数正好等于该结点在二分查找判定树中所在的层次加1(按照第4章的定义，根结点为0层)，查找0层根结点的45，需要比较1次； 查找1层的25和52，需要比较2次； 查找2层的结点5、30、49、60，需要比较3次； 查找3层的结点10、27、35、50、55、70，需要比较4次。根据ASL的定义，可以计算该判定树的ASL。
ASL=1×1 2×2 3×4 4×611=4111
查找成功是查找二分查找判定树中已有的结点，比较从判定树的根结点开始，走了一条从根结点到该结点的路径，路径上经过的结点个数即为查找比较的次数。查找失败的过程走了一条从根结点到其扩充二叉树的外部结点的路径。
对于一般的情况，比较1次查找成功的结点个数为1，即第0层根结点； 比较2个查找成功的结点个数最多为2，即第1层的两个结点； 依此类推，比较j次查找成功的结点个数为2j-1。根据ASL的定义，二分查找的检索效率ASL为： 

ASL=1n(1×20 2×21 … j×2j-1)，其中1≤j≤log2n

根据等比数列，计算得出二分查找效率为log2n。
二分查找虽然相对顺序查找而言效率高，但其缺点也是显然的，必须要求是有序的顺序表，因此不适合链式存储结构，对于有序性的要求也必须保证进行排序后才能进行二分查找。同时，由于顺序表在插入和删除时需要移动大量的结点，所以二分查找仅适合静态查找。而在后续各节给出的树形结构，既具有查找的高效性，也能够满足经常进行插入和删除的动态查找。
5.2二叉排序树的基本概念
二叉排序树又称为二叉搜索树(Binary Search Tree)，它或者是一棵空二叉树，或者是具有下列性质的二叉树： 
(1) 如果左子树非空，左子树的关键码一定小于根结点的关键码； 
(2) 如果右子树非空，右子树的关键码一定大于根结点的关键码； 
(3) 左、右子树仍然是二叉排序树。
图52(a)所示的二叉树不是二叉排序树，因为该二叉树的根结点的关键码是15，而其左孩子的关键码20比根结点的关键码15大。图52(b)所示的二叉树同样不是二叉排序树，因为对于以30为根的右子树来说，根结点30的右孩子的关键码27比30小。图52(c)所示的二叉树是二叉排序树，可以验证它满足二叉排序树的所有性质。

图52二叉树

二叉排序树是一种特殊形式的二叉树，第4章中关于二叉树的性质、存储和遍历都适用于二叉排序树。对图52(c)所示的二叉排序树进行中序遍历，可以得到一个递增的线性有序序列(5, 10, 25, 27, 30, 35, 45, 49, 50, 52, 55, 60, 70)。
二叉排序树的数据结构类型定义如下： 

1typedef int DataType;
2typedef struct BinSearTreeNode
3{
4DataType data;
5struct BinSearTreeNode *leftchild;
6struct BinSearTreeNode *rightchild;
7}BSTreeNode;
8typedef BSTreeNode *BinSearTree;
创建一棵二叉排序树同样可以按照第4章的4.9和4.10节完成，这里不再赘述。下面主要介绍二叉排序树的查找、插入和删除操作。
5.3二叉排序树的查找
在二叉排序树中要查找一个关键码为key的元素，其查找的实质是逐步缩小检索范围的过程，例如2.4.2节的二分检索。变量p记录当前比较结点，变量parent是变量p所指结点的父结点。首先p从根结点开始，如果p不为空，将key与p的关键码进行比较，如果key等于p的关键码，则检索成功，返回NULL； 如果key小于p的关键码，则查找p的左子树； 如果key大于p的关键码，则查找p的右子树。当p为空时，parent记录查找失败时，插入该结点的父结点的指针，返回parent。记录parent的目的是为了方便后面的插入算法。具体实现见算法51。
算法51查找算法。

1BSTreeNode BSTSearch(BinSearTree bt, DataType key) 
2{
3BSTreeNode p, parent;
4p=bt; 
5parent=p;//记录待插入结点的父结点
6while (p) 
7{
8parent=p;
9if (p->data==key) 
10{
11printf("exist this key＼n");
12return NULL;
13}
14if (p->data > key) 
15p=p->leftchild;
16else 
17p=p->rightchild;
18}
19return parent;
20}
算法分析： 在二叉排序树上成功查找关键字的过程恰好走了一条从根结点到该结点的路径，也就是与二叉排序树的高度有关。假设二叉排序树共有n个结点，高度h(log2n≤h
对于图52(c)所示的二叉排序树，在等概率下平均检索长度ASL为： 
ASL=1×1 2×2 3×4 4×4 5×211=43/11
5.4二叉排序树的插入
 显示全部信息