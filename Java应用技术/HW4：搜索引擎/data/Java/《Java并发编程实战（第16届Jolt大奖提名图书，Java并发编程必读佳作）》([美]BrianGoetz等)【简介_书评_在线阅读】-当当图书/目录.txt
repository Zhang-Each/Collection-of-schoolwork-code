本书共分为四个部分: 基础知识。第一部分（第2章～第5章）重点介绍了并发性和线程安全性的基本概念，以及如何使用类库提供的基本并发构建块来构建线程安全类。在第一部分给出了一个清单，其中总结了这一部分中介绍的最重要的规则。 第2章与第3章构成了本书的基础。在这两章中给出了几乎所有用于避免并发危险、构造线程安全的类以及验证线程安全的规则。如果读者重“实践”而轻“理论”，那么可能会直接跳到第二部分，但在开始编写任何并发代码之前，一定要回来读一读这两章! 第4章介绍了如何将一些小的线程安全类组合成更大的线程安全类。第5章介绍了在平台库中提供的一些基础的并发构建模块，包括线程安全的容器类和同步工具类。 
　

本书共分为四个部分:

    基础知识。第一部分（第2章～第5章）重点介绍了并发性和线程安全性的基本概念，以及如何使用类库提供的基本并发构建块来构建线程安全类。在第一部分给出了一个清单，其中总结了这一部分中介绍的最重要的规则。

    第2章与第3章构成了本书的基础。在这两章中给出了几乎所有用于避免并发危险、构造线程安全的类以及验证线程安全的规则。如果读者重“实践”而轻“理论”，那么可能会直接跳到第二部分，但在开始编写任何并发代码之前，一定要回来读一读这两章!

    第4章介绍了如何将一些小的线程安全类组合成更大的线程安全类。第5章介绍了在平台库中提供的一些基础的并发构建模块，包括线程安全的容器类和同步工具类。

    结构化并发应用程序。第二部分（第6章～第9章）介绍了如何利用线程来提高并发应用程序的吞吐量或响应性。第6章介绍了如何识别可并行执行的任务，以及如何在任务执行框架中执行它们。第7章介绍了如何使任务和线程在执行完正常工作之前提前结束。在健壮的并发应用程序与看似能正常工作的应用程序之间存在的重要差异之一就是，如何实现取消以及关闭等操作。第8章介绍了任务执行框架中的一些更高级特性。第9章介绍了如何提高单线程子系统的响应性。

    活跃性、性能与测试。第三部分(第10章～第12章)介绍了如何确保并发程序执行预期的任务，以及如何获得理想的性能。第10章介绍了如何避免一些使程序无法执行下去的活跃性故障。第11章介绍了如何提高并发代码的性能和可伸缩性。第12章介绍了在测试并发代码的正确性和性能时可以采用的一些技术。

    高级主题。第四部分（第13章～第16章）介绍了资深开发人员可能感兴趣的一些主题，包括：显式锁、原子变量、非阻塞算法以及如何开发自定义的同步工具类。 
 显示全部信息