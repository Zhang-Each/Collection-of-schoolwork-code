第1章　Java语言概述与开发环境 1 1.1　Java语言的发展简史 2 1.2　Java程序运行机制 4 1.2.1　高级语言的运行机制 4 1.2.2　Java程序的运行机制和JVM 5 1.3　开发Java的准备 6 1.3.1　下载和安装Java 11的JDK 6 不是说JVM是运行Java程序的虚拟机吗？那JRE和JVM的关系是怎样的呢？ 7 1.3.2　设置PATH环境变量 9 为什么选择用户变量？用户变量与系统变量有什么区别？ 10 1.4　第一个Java程序 10 1.4.1　编辑Java源代码 10 1.4.2　编译Java程序 11 当编译C程序时，不仅需要指定存放目标文件的位置，也需要指定目标文件的文件名，这里使用javac编译Java程序时怎么不需要指定目标文件的文件名呢？ 11 
第1章　Java语言概述与开发环境 1
1.1　Java语言的发展简史 2
1.2　Java程序运行机制 4
1.2.1　高级语言的运行机制 4
1.2.2　Java程序的运行机制和JVM 5
1.3　开发Java的准备 6
1.3.1　下载和安装Java 11的JDK 6
不是说JVM是运行Java程序的虚拟机吗？那JRE和JVM的关系是怎样的呢？ 7
1.3.2　设置PATH环境变量 9
为什么选择用户变量？用户变量与系统变量有什么区别？ 10
1.4　第一个Java程序 10
1.4.1　编辑Java源代码 10
1.4.2　编译Java程序 11
当编译C程序时，不仅需要指定存放目标文件的位置，也需要指定目标文件的文件名，这里使用javac编译Java程序时怎么不需要指定目标文件的文件名呢？ 11
1.4.3　运行Java程序 12
1.4.4　根据CLASSPATH环境变量定位类 13
1.5　Java程序的基本规则 14
1.5.1　Java程序的组织形式 14
1.5.2　Java源文件的命名规则 14
1.5.3　初学者容易犯的错误 15
1.6　交互式工具：jshell 17
1.7　Java 11改进的垃圾回收器 18
1.8　何时开始使用IDE工具 20
我想学习Java编程，到底是学习Eclipse好，还是学习IntelliJ IDEA好呢？ 21
1.9　本章小结 22
本章练习 22
第2章　理解面向对象 23
2.1 面向对象 24
2.1.1 结构化程序设计简介 24
2.1.2 程序的三种基本结构 25
2.1.3 面向对象程序设计简介 27
2.1.4 面向对象的基本特征 28
2.2 UML（统一建模语言）介绍 29
2.2.1 用例图 31
2.2.2 类图 31
2.2.3 组件图 33
2.2.4 部署图 34
2.2.5 顺序图 34
2.2.6 活动图 35
2.2.7 状态机图 36
2.3 Java的面向对象特征 37
2.3.1 一切都是对象 37
2.3.2 类和对象 37
2.4 本章小结 38
第3章　数据类型和运算符 39
3.1 注释 40
3.1.1 单行注释和多行注释 40
3.1.2 文档注释 41
API文档是什么? 41
为什么要学习查看API文档的方法？ 43
3.2 标识符和关键字 47
3.2.1 分隔符 47
3.2.2 标识符规则 49
3.2.3 Java关键字 49
3.3 数据类型分类 50
什么是变量？变量有什么用？ 50
3.4 基本数据类型 51
3.4.1 整型 51
3.4.2 字符型 53
什么是字符集？ 53
3.4.3 浮点型 54
3.4.4 数值中使用下画线分隔 56
3.4.5 布尔型 56
3.4.6 使用var定义变量 57
3.5 基本类型的类型转换 58
3.5.1 自动类型转换 58
3.5.2 强制类型转换 59
3.5.3 表达式类型的自动提升 61
3.6 直接量 62
3.6.1 直接量的类型 62
3.6.2 直接量的赋值 62
3.7 运算符 63
3.7.1 算术运算符 63
3.7.2 赋值运算符 66
3.7.3 位运算符 66
3.7.4 扩展后的赋值运算符 68
3.7.5 比较运算符 69
3.7.6 逻辑运算符 70
3.7.7 三目运算符 71
3.7.8 运算符的结合性和优先级 72
3.8 本章小结 73
本章练习 73
第4章　流程控制与数组 74
4.1 顺序结构 75
4.2 分支结构 75
4.2.1 if条件语句 75
4.2.2 Java 11改进的switch分支语句 79
4.3 循环结构 81
4.3.1 while循环语句 81
4.3.2 do while循环语句 82
4.3.3 for循环 83
4.3.4 嵌套循环 86
4.4 控制循环结构 87
4.4.1 使用break结束循环 87
4.4.2 使用continue忽略本次循环剩下语句 88
4.4.3 使用return结束方法 89
4.5 数组类型 90
4.5.1 理解数组：数组也是一种类型 90
int[]是一种类型吗？怎么使用这种类型呢？ 90
4.5.2 定义数组 90
4.5.3 数组的初始化 91
能不能只分配内存空间，不赋初始值呢？ 91
4.5.4 使用数组 93
为什么要我记住这些异常信息？ 93
4.5.5 foreach循环 94
4.6 深入数组 95
4.6.1 内存中的数组 95
为什么有栈内存和堆内存之分？ 96
4.6.2 基本类型数组的初始化 97
4.6.3 引用类型数组的初始化 98
4.6.4 没有多维数组 100
我是否可以让图4.13中灰色覆盖的数组元素再次指向另一个数组？这样不就可以扩展成三维数组，甚至扩展成更多维的数组吗？ 102
4.6.5 操作数组的工具类：Arrays 103
4.6.6 数组应用举例 106
4.7 本章小结 109
本章练习 109
第5章　面向对象（上） 110
5.1 类和对象 111
5.1.1 定义类 111
构造器不是没有返回值吗？为什么不能用void声明呢？ 113
5.1.2 对象的产生和使用 114
5.1.3 对象、引用和指针 114
5.1.4 对象的this引用 116
5.2 方法详解 119
5.2.1 方法的所属性 119
5.2.2 方法的参数传递机制 120
5.2.3 形参个数可变的方法 124
5.2.4 递归方法 125
5.2.5 方法重载 126
为什么方法的返回值类型不能用于区分重载的方法？ 127
5.3 成员变量和局部变量 127
5.3.1 成员变量和局部变量 128
5.3.2 成员变量的初始化和内存中的运行机制 131
5.3.3 局部变量的初始化和内存中的运行机制 133
5.3.4 变量的使用规则 133
5.4 隐藏和封装 134
5.4.1 理解封装 134
5.4.2 使用访问控制符 135
5.4.3 package、import和import static 138
5.4.4 Java的常用包 142
5.5 深入构造器 142
5.5.1 使用构造器执行初始化 142
构造器是创建Java对象的途径，是不是说构造器完全负责创建Java对象？ 143
5.5.2 构造器重载 144
为什么要用this来调用另一个重载的构造器？我把另一个构造器里的代码复制、粘贴到这个构造器里不就可以了吗？ 145
5.6 类的继承 145
5.6.1 继承的特点 145
5.6.2 重写父类的方法 147
5.6.3 super限定 148
5.6.4 调用父类构造器 150
为什么我创建Java对象时从未感觉到java.lang. Object类的构造器被调用过？ 152
5.7 多态 152
5.7.1 多态性 153
5.7.2 引用变量的强制类型转换 154
5.7.3 instanceof运算符 156
5.8 继承与组合 156
5.8.1 使用继承的注意点 157
5.8.2 利用组合实现复用 158
使用组合关系来实现复用时，需要创建两个Animal对象，是不是意味着使用组合关系时系统开销更大？ 160
5.9 初始化块 161
5.9.1 使用初始化块 161
5.9.2 实例初始化块和构造器 163
5.9.3 类初始化块 163
5.10 本章小结 166
本章练习 166
第6章　面向对象（下） 167
6.1 包装类 168
Java为什么要对这些数据进行缓存呢? 171
6.2 处理对象 172
6.2.1 打印对象和toString方法 172
6.2.2 ==和equals方法 174
上面程序中判断obj是否为Person类的实例时，为何不用obj instanceof Person来判断呢？ 177
6.3 类成员 177
6.3.1 理解类成员 177
6.3.2 单例（Singleton）类 178
6.4 final修饰符 179
6.4.1 final成员变量 180
6.4.2 final局部变量 182
6.4.3 final修饰基本类型变量和引用类型变量的区别 182
6.4.4 可执行“宏替换”的final变量 183
6.4.5 final方法 185
6.4.6 final类 186
6.4.7 不可变类 186
6.4.8 缓存实例的不可变类 189
6.5 抽象类 191
6.5.1 抽象方法和抽象类 191
6.5.2 抽象类的作用 194
6.6 Java 9改进的接口 195
6.6.1 接口的概念 195
6.6.2 Java 9中接口的定义 196
6.6.3 接口的继承 198
6.6.4 使用接口 199
6.6.5 接口和抽象类 201
6.6.6 面向接口编程 201
6.7 内部类 205
6.7.1 非静态内部类 205
学生提问：非静态内部类对象和外部类对象的关系是怎样的？ 208
6.7.2 静态内部类 209
为什么静态内部类的实例方法也不能访问外部类的实例属性呢？ 210
学生提问：接口里是否能定义内部接口？ 211
6.7.3 使用内部类 211
既然内部类是外部类的成员，那么是否可以为外部类定义子类，在子类中再定义一个内部类来重写其父类中的内部类呢？ 213
6.7.4 局部内部类 213
6.7.5 匿名内部类 214
6.8 Java 11增强的Lambda表达式 217
6.8.1 Lambda表达式入门 217
6.8.2 Lambda表达式与函数式接口 219
6.8.3 在Lambda表达式中使用var 221
6.8.4 方法引用与构造器引用 222
6.8.5 Lambda表达式与匿名内部类的联系和区别 225
6.8.6 使用Lambda表达式调用Arrays的类方法 226
6.9 枚举类 226
6.9.1 手动实现枚举类 227
6.9.2 枚举类入门 227
6.9.3 枚举类的成员变量、方法和构造器 229
6.9.4 实现接口的枚举类 231
枚举类不是用final修饰了吗？怎么还能派生子类呢？ 232
6.9.5 包含抽象方法的枚举类 232
6.10 对象与垃圾回收 233
6.10.1 对象在内存中的状态 233
6.10.2 强制垃圾回收 234
6.10.3 finalize方法 235
6.10.4 对象的软、弱和虚引用 236
6.11 修饰符的适用范围 240
6.12 多版本JAR包 240
6.12.1 jar命令详解 241
6.12.2 创建可执行的JAR包 244
6.12.3 关于JAR包的技巧 244
6.13 本章小结 245
本章练习 245
第7章　Java基础类库 246
7.1 与用户互动 247
7.1.1 运行Java程序的参数 247
7.1.2 使用Scanner获取键盘输入 248
7.2 系统相关 250
7.2.1 System类 250
7.2.2 Runtime类与Java 9的ProcessHandle 252
7.3 常用类 253
7.3.1 Object类 253
7.3.2 操作对象的Objects工具类 255
7.3.3 Java 9改进的String、StringBuffer和StringBuilder类 256
7.3.4 Math类 259
7.3.5 ThreadLocalRandom与Random 261
7.3.6 BigDecimal类 262
7.4 Java 8的日期、时间类 265
7.4.1 Date类 265
7.4.2 Calendar类 266
7.4.3 新的日期、时间包 269
7.5 正则表达式 271
7.5.1 创建正则表达式 271
7.5.2 使用正则表达式 274
7.6 变量处理和方法处理 277
7.6.1
 显示全部信息