★第一部分：多线程基础 20 第1章：快速认识线程 22 1.1 线程的介绍 22 1.2 快速创建并启动一个线程 22 1.2.1 尝试并行运行 23 1.2.2 并发运行交替输出 24 1.2.3 使用Jconsole观察线程 25 1.3 线程的生命周期详解 26 1.3.1 线程的NEW状态 27 1.3.2 线程的RUNNABLE状态 28 1.3.3 线程的 RUNNING状态 28 1.3.4 线程的BLOCKED状态 29 1.3.5 线程的TERMINATED状态 29 1.4 线程的start方法剖析--模板设计模式在Thread中的应用 30 
★第一部分：多线程基础       20

第1章：快速认识线程       22

1.1 线程的介绍    22

1.2 快速创建并启动一个线程    22

1.2.1 尝试并行运行     23

1.2.2 并发运行交替输出     24

1.2.3 使用Jconsole观察线程      25

1.3 线程的生命周期详解    26

1.3.1 线程的NEW状态      27

1.3.2 线程的RUNNABLE状态  28

1.3.3 线程的 RUNNING状态    28

1.3.4 线程的BLOCKED状态     29

1.3.5 线程的TERMINATED状态      29

1.4 线程的start方法剖析--模板设计模式在Thread中的应用 30

1.4.1 Thread start方法源码分析以及注意事项  30

1.4.2 模板设计模式在Thread中的应用    33

1.4.3 Thread模拟营业大厅叫号机程序      34

1.5 Runnable接口的引入以及策略模式在Thread中的使用    39

1.5.1 Runnable的职责  39

1.5.2 策略模式在Thread中的应用    40

1.5.3 模拟营业大厅叫号机程序  42

1.6 本章总结 43

第2章：深入理解Thread构造函数   45

2.1 线程的命名    45

2.1.1 线程的默认命名  45

2.1.2 命名线程     46

2.1.3 修改线程的名字  47

2.2 线程的父子关系    48

2.3 Thread与ThreadGroup   48

2.4 Thread与Runnable  50

2.5 Thread与JVM虚拟机栈       50

2.5.1 Thread与Stacksize      51

2.5.2 JVM内存结构     53

2.5.3 Thread与虚拟机栈      58

2.6 守护线程 62

2.6.1 什么是守护线程  62

2.6.2 守护线程的作用  64

2.7 本章总结 64

第3章：Thread API的详细介绍 66

3.1 线程sleep       66

3.1.1 sleep方法介绍     66

3.1.2 使用TimeUnit替代Thread.sleep       67

3.2 线程yield       68

3.2.1 yield方法介绍     68

3.2.2 yield vs sleep 69

3.3 设置线程的优先级 69

3.3.1 线程优先级介绍  70

3.3.2 线程优先级源码分析  71

3.3.3 关于优先级的一些总结     72

3.4 获取线程ID   73

3.5 获取当前线程 73

3.6 设置线程上下文类加载器    74

3.7 线程interrupt  75

3.7.1 interrupt 75

3.7.2 isInterrupted  77

3.7.3 interrupted    79

3.7.4 interrupt注意事项       81

3.8 线程join  82

3.8.1 线程join方法详解     83

3.8.2 join方法结合实战       85

3.9 如何关闭一个线程 90

3.9.1 正常关闭     90

3.9.2 异常退出     94

3.9.3 进程假死     94

3.10 本章总结      95

第4章：线程安全与数据同步    97

4.1 数据同步 97

4.1.1 数据不一致问题的引入     97

4.1.2 数据不一致问题原因分析  99

4.2 初识 synchronized关键字    101

4.2.1 什么是synchronized   102

4.2.2 synchronized关键字的用法 103

4.3 深入synchronized关键字     105

4.3.1 线程堆栈分析     105

4.3.2 JVM指令分析     108

4.3.3 使用synchronized需要注意的问题   112

4.4 This Monitor和Class Monitor的详细介绍   114

4.4.1 this monitor   114

4.4.2 class monitor 117

4.5 程序死锁的原因以及如何诊断    120

4.5.1 程序死锁     120

4.5.2 程序死锁举例     121

4.5.3 死锁诊断     124

4.6 本章总结 126

第5章：线程间通信    127

5.1 同步阻塞与异步非阻塞 127

5.1.1 同步阻塞消息处理     127

5.1.2 异步非阻塞消息处理  128

5.2 单线程间通信 129

5.2.1 初识wait和notify      129

5.2.2 wait和notify方法详解       133

5.2.3 wait和notify注意事项       135

5.2.4 wait vs sleep  137

5.3 多线程间通信 137

5.3.1 生产者消费者     137

5.3.2 线程休息室wait set    140

5.4 自定义显式锁BooleanLock   141

5.4.1 synchronized关键字的缺陷 142

5.4.2 显式锁BooleanLock   143

5.5 本章总结 153

第6章：ThreadGroup详细讲解  155

6.1 ThreadGroup与Thread   155

6.2 创建Thread Group 155

6.3 拷贝Thread数组和ThreadGroup数组 157

6.3.1 拷贝Thread数组 157

6.3.2 拷贝ThreadGroup数组      159

6.4 ThreadGroup操作   160

6.4.1 ThreadGroup的基本操作    161

6.4.2 ThreadGroup的interrupt     164

6.4.3 ThreadGroup的destroy       166

6.4.4 守护ThreadGroup       168

6.5 本章总结 169

第7章：Hook线程以及捕获线程执行异常      170

7.1 获取线程运行时异常    170

7.1.1 UncaughtExceptionHandler介绍 170

7.1.2 UncaughtExceptionHandler实例 171

7.1.3 UncaughtExceptionHandler源码分析 173

7.2 注入钩子线程（Hook）       175

7.2.1 Hook线程介绍    175

7.2.2 Hook线程实战    177

7.2.3 Hook线程应用场景以及注意事项    179

7.3 本章总结 179

第8章：线程池原理以及自定义线程池    180

8.1 线程池原理    180

8.2 线程池实现    181

8.2.1 线程池接口定义  182

8.2.2 线程池详细实现  188

8.3 线程池应用    198

8.4 本章总结 202

 

★第二部分：Java ClassLoader       204

第9章 类的加载过程  205

9.1 类的加载过程介绍 205

9.2 类的主动使用和被动使用    206

9.3 类加载过程详解    209

9.3.1 类的加载阶段     210

9.3.2 类的连接阶段     212

9.3.3 类的初始化阶段  219

9.4 本章总结 221

第10章 JVM类加载器       224

10.1 JVM内置三大类加载器      224

10.1.1 根类加载器介绍       225

10.1.2 扩展类加载器介绍   226

10.1.3 系统类加载器介绍   227

10.2 自定义类加载器   227

10.2.1 自定义类加载器，问候世界   228

10.2.2 双亲委托机制详细介绍   233

10.2.3 破坏双亲委托机制   236

10.2.4 类加载器命名空间，运行时包，类的卸载等       239

10.3 本章总结      246

第11章 线程上下文类加载器    249

11.1 为什么需要线程上下文类加载器      249

11.2 数据库驱动的初始化源码分析   250

 

★第三部分 深入理解volatile关键字    254

第12章 volatile关键字的介绍   255

12.1 初识volatile关键字     255

12.2 机器硬件CPU      257

12.3 Java 内存模型      262

第13章 深入volatile关键字      265

13.1 并发编程的三个重要特性   265

13.1.1 原子性       265

13.1.2 可见性       266

13.1.3 有序性       266

13.2 JMM如何保证三大特性      268

13.2.1 JMM与原子性   269

13.2.2 JMM与可见性   271

13.2.3 JMM与有序性   272

13.3 volatile关键字深入解析      273

13.3.1 volatile关键字的语义       274

13.3.2 volatile的原理和实现机制       277

13.3.3 volatile的使用场景   278

13.3.4 volatile vs synchronized     280

第15章 7种单例设计模式的设计     282

14.1 饿汉式   282

14.2 懒汉式   283

14.3 懒汉式 同步方法 284

14.4 Double-Check 285

14.5 Volatile Double-Check  288

14.6 Holder方式   288

14.7枚举方式       289

14.8本章总结       291

 

★第四部分 多线程设计架构模式  292

第15章 监控任务的生命周期    296

15.1 场景描述      296

15.2 当观察者模式遇到Thread   296

15.2.1 接口定义   296

15.2.2 ObservableThread实现      300

15.3 测试及技巧总结   303

15.3.1 测试运行   303

15.3.2 关键点总结       304

第16章 Single Thread Execution设计模式       305

16.1 机场过安检   305

16.1.1 非线程安全       305

16.1.2 问题分析   308

16.1.3 线程安全   310

16.2 吃面问题      311

16.2.1 吃面引起的死锁       312

16.2.2 解决吃面引起的死锁问题       314

16.2.3 哲学家吃面       316

16.3 本章总结      317

第17章 读写锁分离设计模式    318

17.1 场景描述      318

17.2 读写分离程序设计      318

17.2.1 接口定义   318

17.2.2 程序实现   321

17.3 读写锁的使用      328

17.4 关于更多读写锁的话题      332

第18章 不可变对象设计模式    334

18.1 线程安全性   334

18.2 不可变对象的设计      334

18.2.1 非线程安全的累加器       335

18.2.2 方法同步增加线程安全性       338

18.2.3 不可变的累加器对象设计       339

18.3 技巧总结      341

第19章 Future设计模式    342

19.1 先给你一张凭据   342

19.2 Future设计模式实现    342

19.2.1 接口定义   343

19.2.2 程序实现   344

19.3 Future的使用以及技巧总结       347

19.4 增强FutureService使其支持回调      349

19.5 本章总结      351

第20章 Guarded Suspension 设计模式     352

20.1 什么是Guarded Suspension设计模式       352

20.2 Guarded Suspension示例     352

第21章 线程上下文设计模式    355

21.1 什么是上下文      355

21.2 线程上下文设计   356

21.3 ThreadLocal详解   358

21.3.1 ThreadLocal的使用场景及注意事项       358

21.3.2 ThreadLocal的方法详解及源码分析       359

21.3.3 ThreadLocal的内存泄漏问题分析   365

21.4 使用ThreadLocal设计线程上下文     370

第22章 Balking设计模式   373

22.1 什么是Balking设计    373

22.2 Balking模式之文档编辑      374

22.2.1 Document    374

22.2.2 AutoSaveThread  377

22.2.3 DocumentEditThread  378

22.3 本章总结      380

第23章 Latch设计模式      381

23.1 什么是Latch 381

23.2 CountDownLatch程序实现  382

23.2.1 无限等待的Latch     382

23.2.2 有超时设置的Latch  387

23.3 Latch设计模式总结     389

第24章 Thread-Per-Message设计模式      392

24.1 什么是Thread-Per-Message 392

24.2 每个任务一个线程      392

24.3 多用户的网络聊天      395

24.3.1 服务端程序       396

24.3.2 响应客户端连接的Handler     397

24.3.3 聊天程序测试   400

24.4 本章总结      400

第25章 Two Phase Termination设计模式  401

25.1 什么是Two Phase Termination    401

25.2 Two Phase Termination示例 402

25.2.1 线程停止的Two Phase Termination 402

25.2.2 进程关闭的Two Phase Termination 404

25.3 知识扩展      404

25.3.1 Strong Reference（强引用）及LRUCache      405

25.3.2 Soft Reference（软引用）及SoftLRUCache   410

25.3.3 Weak Reference（弱引用）      413

25.3.4 Phantom Reference（幻影引用）     415

25.4 本章总结      418

第26章 Worker-Thread设计模式      419

26.1 什么是Worker-Thread模式 419

26.2 Worker-Thread模式实现      419

26.2.1 产品及组装说明书   420

26.2.2 流水线传送带   421

26.2.3 流水线工人       423

26.3 Worker-Thread模式测试与总结  425

26.3.1 产品流水线测试       425

26.3.2 Worker-Thread vs Producer-Consumer     426

第27章 Active Objects设计模式       428

27.1 接受异步消息的主动对象   428

27.2 标准Active Objects模式设计     428

27.2.1 OrderService接口设计      430

27.2.2 OrderServiceImpl 详解     431

27.2.3 OrderServiceProxy详解    432

27.2.4 MethodMessage   434

27.2.5 ActiveMessageQueue  437

27.2.6 OrderServiceFactory及测试     439

27.3 通用Active Objects框架设计     441

27.3.1 ActiveMessage详解    442

27.3.2 @ActiveMethod  445

27.3.3 ActiveServiceFactory详解 446

27.3.4 ActiveMessageQueue及其它     449

27.4 Active Objects总结       451

第28章 Event Bus（消息总线）设计模式       452

28.1 Event Bus设计      452

28.1.1 Bus接口详解     453

28.1.2 同步EventBus详解  455

28.1.3 异步EventBus详解  458

28.1.4 Subscriber注册表Registry详解       459

28.1.5 Event广播Dispatcher详解       462

28.1.6其它类接口设计 466

28.1.7 Event Bus测试   468

28.2 Event Bus实战--监控目录变化   470

28.2.1 WatchService遇到EventBus     471

28.2.2 FileChangeEvent 473

28.2.3 监控目录变化   473

28.3 EventBus总结       475

第29章 Event Driven(事件驱动) 设计模式     476

29.1 Event-Driven Architecture基础    476

29.1.1 Events  476

29.1.2 Event Handlers   477

29.1.3 Event Loop  478

29.2 开发一个Event-Driven 框架     480

29.2.1 同步EDA框架设计  480

29.2.2 异步EDA框架设计  487

29.3 Event-Driven的使用    492

29.3.1 Chat Event  492

29.3.2 Chat Channel(Handler)      494

29.3.3 Chat User线程   495

29.4 本章总结      498
 显示全部信息