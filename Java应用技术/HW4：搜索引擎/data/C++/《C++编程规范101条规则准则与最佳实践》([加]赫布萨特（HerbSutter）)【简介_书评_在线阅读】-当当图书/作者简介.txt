组织和策略问题　1 第0条　不要拘泥于小节(又名：了解哪些东西不应该标准化)　2 第1条　在高警告级别干净利落地进行编译　4 第2条　使用自动构建系统　7 第3条　使用版本控制系统　8 第4条　做代码审查　9设计风格　11 第5条　一个实体应该只有一个紧凑的职责　12 组织和策略问题　1第0条　不要拘泥于小节(又名：了解哪些东西不应该标准化)　2第1条　在高警告级别干净利落地进行编译　4第2条　使用自动构建系统　7第3条　使用版本控制系统　8第4条　做代码审查　9设计风格　11第5条　一个实体应该只有一个紧凑的职责　12第6条　正确、简单和清晰第一　13第7条　编程中应知道何时和如何考虑可伸缩性　14第8条　不要进行不成熟的优化　16第9条　不要进行不成熟的劣化　18第10条　尽量减少全局和共享数据　19第11条　隐藏信息　20第12条　懂得何时和如何进行并发性编程　21第13条　确保资源为对象所拥有。使用显式的RAII和智能指针　24编程风格　27第14条　宁要编译时和连接时错误，也不要运行时错误　28第15条　积极使用const　30第16条　避免使用宏　32第17条　避免使用“魔数”　34第18条　尽可能局部地声明变量　35第19条　总是初始化变量　36第20条　避免函数过长，避免嵌套过深　38第21条　避免跨编译单元的初始化依赖　39第22条　尽量减少定义性依赖。避免循环依赖　40第23条　头文件应该自给自足　42第24条　总是编写内部#include保护符，决不要编写外部#include保护符　43函数与操作符　45第25条　正确地选择通过值、(智能)指针或者引用传递参数　46第26条　保持重载操作符的自然语义　47第27条　优先使用算术操作符和赋值操作符的标准形式　48第28条　优先使用++和--的标准形式。优先调用前缀形式　50第29条　考虑重载以避免隐含类型转换　51第30条　避免重载&&、||或　,(逗号)　52第31条　不要编写依赖于函数参数求值顺序的代码　54类的设计与继承　55第32条　弄清所要编写的是哪种类　56第33条　用小类代替巨类　57第34条　用组合代替继承　58第35条　避免从并非要设计成基类的类中继承　60第36条　优先提供抽象接口　62第37条　公用继承即可替换性。继承，不是为了重用，而是为了被重用　64第38条　实施安全的覆盖　66第39条　考虑将虚拟函数声明为非公用的，将公用函数声明为非虚拟的　68第4 显示全部信息