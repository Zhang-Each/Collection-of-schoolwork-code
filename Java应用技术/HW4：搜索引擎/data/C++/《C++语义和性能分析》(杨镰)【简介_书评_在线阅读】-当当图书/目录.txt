我与C 1988年，我在美国波特兰州立大学（PSU）攻读计算机科学硕士学位时，第yi次接触到C＋＋ 语言。当时，我的导师是波兰裔，名叫博卡斯基（Marek Perkowski，http://www.pdx.edu/profile/marek-perkowski）。他研究机器人和设计自动化（design automation）理论，喜欢“人工智能”领域里颇受青睐的Lisp程序设计语言，因此他也把对Lisp这种优美、简洁的语言的欣赏传递给了他的研究生们。我也开始使用Lisp语言，常常能感受到这种语言的数学美和惊人的抽象能力。 在PSU那种松散的学术氛围中，不同的声音是一件平常的事情：博士候选人大卫•史密斯在一次讨论时说： OOP方法才是今后的方向；Functional语言（如Lisp）只能待在象牙塔里；数风流语言，还要看C＋＋ 语言。 这大概是我第yi次听说C＋＋ 语言，我还将信将疑。不过，不久之后发生的一件事使我终身难忘，也证实了他的观点。在计算机系举办的一次“软件五角棋”大赛中，我使用Lisp语言编写了一个五角棋程序，自认为它非常优美、智慧且简洁，所以信心百倍。可是，第yi轮就惨败给了我的对手。而对手的程序是使用C＋＋ 语言编写的！惨败的原因是，相比对手的程序，我的程序反应速度实在很慢，所以失分于超时。 
我与C  

1988年，我在美国波特兰州立大学（PSU）攻读计算机科学硕士学位时，第yi次接触到C＋＋ 语言。当时，我的导师是波兰裔，名叫博卡斯基（Marek Perkowski，http://www.pdx.edu/profile/marek-perkowski）。他研究机器人和设计自动化（design automation）理论，喜欢“人工智能”领域里颇受青睐的Lisp程序设计语言，因此他也把对Lisp这种优美、简洁的语言的欣赏传递给了他的研究生们。我也开始使用Lisp语言，常常能感受到这种语言的数学美和惊人的抽象能力。

在PSU那种松散的学术氛围中，不同的声音是一件平常的事情：博士候选人大卫•史密斯在一次讨论时说：

OOP方法才是今后的方向；Functional语言（如Lisp）只能待在象牙塔里；数风流语言，还要看C＋＋ 语言。

这大概是我第yi次听说C＋＋ 语言，我还将信将疑。不过，不久之后发生的一件事使我终身难忘，也证实了他的观点。在计算机系举办的一次“软件五角棋”大赛中，我使用Lisp语言编写了一个五角棋程序，自认为它非常优美、智慧且简洁，所以信心百倍。可是，第yi轮就惨败给了我的对手。而对手的程序是使用C＋＋ 语言编写的！惨败的原因是，相比对手的程序，我的程序反应速度实在很慢，所以失分于超时。

这件事加深了我对C＋＋ 语言的印象，我决定尝试使用C＋＋ 语言和OOP方法！于是在1988年的冬季，我一学期同时选了Smalltalk语言和C＋＋ 语言两门课程。

从Smalltalk语言中，我认识到OOP方法的精髓。同时我也认识到Smalltalk语言在性能和实用性上的局限性；从C＋＋ 语言中，我体会到OOP方法中沉淀的哲学思想与实际应用的结合，以及程序设计的艺术性和工艺性。在学习C＋＋ 语言之前，我对于计算机科学的兴趣完全停留在表面。学习了C＋＋ 语言之后，我惊喜地发现：C＋＋ 语言让我这个不喜欢烦琐、复杂系统的计算机科学新手看到了一个充满哲理性的表达工具，能够帮助我清晰地表达自己的逻辑思维和创造性。另一方面，C＋＋ 的实用性和强大的性能保障，也让我终选择了用它来做毕业论文项目。

离开学校后不久，我就进入微软公司总部的微软研究院工作，从事Windows NT的性能研究。去微软公司面试的时间是1995年8月17日，距离Windows 95的轰动性发布只有一周时间。记得面试的一个C＋＋ 问题是论述“多态性（polymorphism）”是否意味着“动态绑定”。我的面试官告诉我:“C＋＋ 没有动态绑定，只有静态绑定，而COM（component object model）里才有真正的动态绑定。”我十分认真、激动地争辩道：“C＋＋ 的polymorphism就是动态绑定。”两人从会议室争论到咖啡厅，然后又争论到坐落在美丽的“华盛顿湖畔”的一家意大利餐厅。晚上，当人事部门宣布面试结果时，我以为一定没戏，后悔自己太认真，不知道天高地厚。没想到我被那位面试官所在的团队——微软公司总部的微软研究院“软件性能研究中心（PPRC）”录用，而且我们一直是合作良好的同事。直到今天，我还认为我对了，他错了。但在微软公司当时的氛围里，“对”“错”并不是重要的，重要的是“激情”和“执着”。而正是这种精神和文化，将20世纪90年代的微软和世界区分开来，让软件世界的“微软时代”降临。我也有幸加入到这个世界一流公司的研发队伍中，在几个重要的产品组里，贡献了自己的青春，实现了读研时的理想。20世纪90年代，微软公司是充满活力和朝气的崛起的巨人。

记得有个朋友的儿子在美国东部一所大学读书，一次去他家过圣诞节，吃饭时他问我：“你怎么就能进微软，而我的许多朋友都进不去呢？”其实，我的真实答案是两个字：“运气”。但是我当时的回答是：“你必须每天花至少20分钟时间，读一些具体的计算机科学著作；然后至少花10分钟时间，想一些抽象的问题，比如宇宙爆炸理论的逻辑错误和量子叠加的荒谬性等，只要和技术无关就好。”因为我一直以为：如果你对哲学没有兴趣，你不可能成为一个优秀的程序员；而做一个平庸的程序员太累了，不值得！

加入微软公司后，我有机会参与到多个大型的C＋＋ 项目的开发中。从Windows NT性能测试工具到Windows Vista的安全性，以及后来的Windows 2008服务器，C＋＋ 都在实战中给我惊喜，但有时它也会给我带来噩梦。然而，我体会深的，就是几乎每天我都会庆幸自己又学到了新的技能和思想，这种新东西可能是技术上的，也可能是方法学上的，这种体会持续了我在微软公司工作的5000多个日日夜夜。

我发现，C＋＋ 并不是一门简单、平庸的语言。正因为它的定位，它是植根于C以及VNA系统的，因此一个对VNA不清楚的程序员，是不可能掌握C＋＋ 语言的。C＋＋ 也并非一门在数学上有深厚根基的语言，很难像Lisp语言那样用Lambda表达式和高阶函数等概念表达C＋＋ 。这其实是C＋＋ 程序不容易编写好的深层原因。

在微软公司工作10多年，我接触过许多C＋＋ 资深程序员，比如《深度探索C＋＋ 对象模型》的作者Stan Lippman。我是作为VC＋＋ 组的架构师，通过“发现”VC＋＋ 在实现C＋＋  SPEC方面的一些错误而结识了他，并数次就C＋＋ 的历史、哲学和设计模板问题与他交流。

然而，我接触更多的是C＋＋ 新手，比如我带领的多个美国常春藤名校的“实习生”，现在也早已成为各部门的高级主管。即使在这样一个世界一流的软件公司里，他们中间一些人对C＋＋ 语言的精神，尤其是它的语义层面上的规则，仍存在诸多的误解。一些通俗但并不精确的观点在业内长期流行：比如C＋＋ 的后门很多，C＋＋ 的性能较C有较大差距等。造成这些误解，一方面是由于缺乏系统性的教育和简明易懂的著作，另一方面是C＋＋ 语言本身缺乏严格的数学、逻辑框架。
 显示全部信息